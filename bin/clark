#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');

const findRoot = require('find-root');

const {makeDebug} = require('../lib/lib/debug');

const debug = makeDebug(__filename);

try {
  debug('looking for locally installed clark');
  const root = findRoot(process.cwd(), dir => {
    const clarkPath = path.resolve(dir, 'node_modules', '.bin', 'clark');
    // eslint-disable-next-line no-sync
    return fs.existsSync(clarkPath);
  });

  debug('found locally installed clark');
  // This isn't perfect; it could break for certain layouts of node_modules, but
  // I'm not sure those layouts can happen in a way that would also allow clark
  // to work in a project.
  const localPath = path.resolve(
    root,
    'node_modules',
    '@ianwremmel',
    'clark',
    'lib',
    'cli',
  );
  debug(`loading clark at ${localPath}`);
  require(localPath);
  debug('loaded locally installed clark');
} catch (err) {
  if (err.message === 'package.json not found in path') {
    debug('did not find locally installed clark');
    debug('falling back to global clark');
    // eslint-disable-next-line import/no-unassigned-import
    require('../lib/cli');
    debug('loaded globally installed clark');
  } else {
    throw err;
  }
}
